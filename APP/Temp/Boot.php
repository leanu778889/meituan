<?php defined('DEBUG') OR define('DEBUG','');defined('GROUP_NAME') OR define('GROUP_NAME','APP');defined('HDPHP_VERSION') OR define('HDPHP_VERSION','2013.08.25');defined('HDPHP_PATH') OR define('HDPHP_PATH','/var/www/meituan/hdphp/');defined('ROOT_PATH') OR define('ROOT_PATH','/var/www/meituan/');defined('GROUP_PATH') OR define('GROUP_PATH','./APP/');defined('IS_GROUP') OR define('IS_GROUP','\\');defined('TEMP_PATH') OR define('TEMP_PATH','./APP/Temp/');defined('TEMP_FILE') OR define('TEMP_FILE','Boot.php');defined('DS') OR define('DS','/');defined('IS_WIN') OR define('IS_WIN','');defined('HDPHP_DATA_PATH') OR define('HDPHP_DATA_PATH','/var/www/meituan/hdphp/Data/');defined('HDPHP_LIB_PATH') OR define('HDPHP_LIB_PATH','/var/www/meituan/hdphp/Lib/');defined('HDPHP_CONFIG_PATH') OR define('HDPHP_CONFIG_PATH','/var/www/meituan/hdphp/Config/');defined('HDPHP_CORE_PATH') OR define('HDPHP_CORE_PATH','/var/www/meituan/hdphp/Lib/Core/');defined('HDPHP_EXTEND_PATH') OR define('HDPHP_EXTEND_PATH','/var/www/meituan/hdphp/Extend/');defined('HDPHP_DRIVER_PATH') OR define('HDPHP_DRIVER_PATH','/var/www/meituan/hdphp/Lib/Driver/');defined('HDPHP_EVENT_PATH') OR define('HDPHP_EVENT_PATH','/var/www/meituan/hdphp/Lib/Event/');defined('HDPHP_FUNCTION_PATH') OR define('HDPHP_FUNCTION_PATH','/var/www/meituan/hdphp/Lib/Function/');defined('HDPHP_LANGUAGE_PATH') OR define('HDPHP_LANGUAGE_PATH','/var/www/meituan/hdphp/Lib/Language/');defined('HDPHP_TPL_PATH') OR define('HDPHP_TPL_PATH','/var/www/meituan/hdphp/Lib/Tpl/');defined('COMMON_PATH') OR define('COMMON_PATH','./APP/Common/');defined('COMMON_CONFIG_PATH') OR define('COMMON_CONFIG_PATH','./APP/Common/Config/');defined('COMMON_MODEL_PATH') OR define('COMMON_MODEL_PATH','./APP/Common/Model/');defined('COMMON_LANGUAGE_PATH') OR define('COMMON_LANGUAGE_PATH','./APP/Common/Language/');defined('COMMON_EVENT_PATH') OR define('COMMON_EVENT_PATH','./APP/Common/Event/');defined('COMMON_TAG_PATH') OR define('COMMON_TAG_PATH','./APP/Common/Tag/');defined('COMMON_LIB_PATH') OR define('COMMON_LIB_PATH','./APP/Common/Lib/');final class HDPHP { static public function init() { if (IS_GROUP) { if (is_file(COMMON_PATH . 'Config/config.php')) { C(require(COMMON_PATH . 'Config/config.php')); } Route::group(); } define("APP", ucfirst(IS_GROUP ? $_GET[C('VAR_APP')] : basename(substr(APP_PATH, 0, -1)))); IS_GROUP and define("APP_PATH", GROUP_PATH . 'App/' . APP . '/'); defined("CONTROL_PATH") or define("CONTROL_PATH", APP_PATH . 'Control/'); defined("MODEL_PATH") or define("MODEL_PATH", APP_PATH . 'Model/'); defined("CONFIG_PATH") or define("CONFIG_PATH", APP_PATH . 'Config/'); defined("EXTEND_PATH") or define("EXTEND_PATH", APP_PATH . 'Extend/'); defined("EVENT_PATH") or define("EVENT_PATH", EXTEND_PATH . 'Event/'); defined("LANGUAGE_PATH") or define("LANGUAGE_PATH", EXTEND_PATH . 'Language/'); defined("TAG_PATH") or define("TAG_PATH", EXTEND_PATH . 'Tag/'); defined("LIB_PATH") or define("LIB_PATH", EXTEND_PATH . 'Lib/'); defined("COMPILE_PATH") or define("COMPILE_PATH", TEMP_PATH . (IS_GROUP ? APP . '/Compile/' : 'Compile/')); defined("CACHE_PATH") or define("CACHE_PATH", TEMP_PATH . (IS_GROUP ? APP . '/Cache/' : 'Cache/')); defined("TABLE_PATH") or define("TABLE_PATH", TEMP_PATH . (IS_GROUP ? APP . '/Table/' : 'Table/')); defined("LOG_PATH") or define("LOG_PATH", TEMP_PATH . 'Log/'); $app_config = CONFIG_PATH . 'config.php'; if (is_file($app_config)) C(require($app_config)); $tpl = rtrim(C("TPL_DIR"), '/'); $tpl_style = rtrim(C("TPL_STYLE"), '/'); define("TPL_PATH", (strstr($tpl, '/') ? $tpl . '/' : APP_PATH . $tpl . '/') . ($tpl_style ? $tpl_style . '/' : $tpl_style)); define("PUBLIC_PATH", TPL_PATH . 'Public/'); Route::app(); @ini_set('memory_limit', '128M'); @ini_set("register_globals", "off"); @ini_set('magic_quotes_runtime', 0); define('NOW', $_SERVER['REQUEST_TIME']); define("NOW_MICROTIME", microtime(true)); define("MAGIC_QUOTES_GPC", @get_magic_quotes_gpc() ? true : false); define('REQUEST_METHOD', $_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD == 'GET' ? true : false); define('IS_POST', REQUEST_METHOD == 'POST' ? true : false); define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false); define("IS_AJAX", ajax_request()); define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false); spl_autoload_register(array(__CLASS__, "autoload")); set_error_handler(array(__CLASS__, "error"), E_ALL); set_exception_handler(array(__CLASS__, "exception")); O("Session" . ucwords(C("SESSION_ENGINE")), "run"); !ini_get("session.auto_start") and C("SESSION_AUTO") and session_start(); is_file(COMMON_LANGUAGE_PATH . C('LANGUAGE').'.php') and L(require COMMON_LANGUAGE_PATH . C('LANGUAGE').'.php'); is_file(LANGUAGE_PATH . C('LANGUAGE').'.php') and L(require LANGUAGE_PATH . C('LANGUAGE').'.php'); C("CORE_EVENT", require HDPHP_CONFIG_PATH . "event.php"); IS_GROUP and is_file(COMMON_CONFIG_PATH . 'event.php') and C("GROUP_EVENT", require COMMON_CONFIG_PATH . 'event.php'); is_file(CONFIG_PATH . 'event.php') and C("APP_EVENT", require CONFIG_PATH . 'event.php'); IS_GROUP and is_file(COMMON_LIB_PATH . 'Alias.php') and alias_import(COMMON_LIB_PATH . 'Alias.php'); is_file(LIB_PATH . 'Alias.php') and alias_import(LIB_PATH . 'Alias.php'); } static private function autoload($className) { $class = ucfirst($className) . '.class.php'; if (require_array(array( EVENT_PATH . $class, LIB_PATH . $class, TAG_PATH . $class, HDPHP_CORE_PATH . $class, HDPHP_EXTEND_PATH . $class, HDPHP_EXTEND_PATH . '/Tool/' . $class )) ) { return true; } elseif (substr($className, -5) == "Model") { if (require_array(array( MODEL_PATH . $class, HDPHP_DRIVER_PATH . 'Model/' . $class )) ) return; } elseif (substr($className, -7) == "Control") { if (require_array(array( CONTROL_PATH . $class, HDPHP_CORE_PATH . $class )) ) return; } elseif (substr($className, 0, 2) == 'Db') { if (require_array(array( HDPHP_DRIVER_PATH . 'Db/' . $class )) ) return; } elseif (substr($className, 0, 5) == "Cache") { if (require_array(array( HDPHP_DRIVER_PATH . 'Cache/' . $class, )) ) return; } elseif (substr($className, 0, 7) == "Session") { if (require_array(array( HDPHP_DRIVER_PATH . 'Session/' . $class )) ) return; } elseif (substr($className, -5) == "Event") { if (require_array(array( EVENT_PATH . $class )) ) return; } elseif (alias_import($className)) { return; } $msg = "Class {$class} not found"; Log::write($msg); error($msg); } static public function exception($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if ($trace[0]['function'] == 'throw_exception') { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; } else { $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } error($error); } static public function error($errno, $error, $file, $line) { $errorType = substr(FriendlyErrorType($errno), 2); $msg = "[$errorType]" . $error . ' [TIME]' . date("Y-m-d h:i:s") . ' [FILE]' . $file . ' [LINE]' . $line ; switch ($errno) { case E_ERROR: case E_PARSE: case E_USER_ERROR: error($msg); break; case E_USER_WARNING: case E_USER_NOTICE: default: Log::set($msg, $errno); if (DEBUG && C("SHOW_WARNING")) include HDPHP_TPL_PATH . 'notice.html'; break; } } }final class HdphpException extends Exception { }final class App { public static function run() { event("APP_START"); DEBUG and Debug::start("APP_START"); self::init(); self::start(); if (DEBUG) { if ((!C("DEBUG_AJAX") && IS_AJAX) || !C("DEBUG_SHOW")) ; else Debug::show("APP_START", "APP_END"); } Log::save(); event("APP_END"); } private static function start() { $control = control(CONTROL); if (!$control) { $control = Control("Empty"); if (!$control) { _404('模块' . CONTROL . '不存在'); } } try { $method = new ReflectionMethod($control, METHOD); if ($method->isPublic()) { $method->invoke($control); } else { throw new ReflectionException; } } catch (ReflectionException $e) { $method = new ReflectionMethod($control, '__call'); $method->invokeArgs($control, array(METHOD, '')); } } private static function init() { define("CHARSET", preg_match('@utf8@i', C("CHARSET")) ? "UTF-8" : C("CHARSET")); define("CHARSET_DB", str_replace("-", "", C("CHARSET"))); date_default_timezone_set(C("default_time_zone")); } }final class Route { static public function group() { $query = C('URL_TYPE') == 2 && isset($_GET[C("PATHINFO_VAR")]) ? $_GET[C("PATHINFO_VAR")] : (isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : $_SERVER['QUERY_STRING']); $url = self::parseRoute(str_ireplace(C('PATHINFO_HTML'), '', trim($query, '/'))); $gets = ''; if (!empty($_SERVER['PATH_INFO'])) { $url = str_replace(array('&', '='), C("PATHINFO_DLI"), $url); } else { parse_str($url, $gets); $_GET = array_merge($_GET, $gets); } $args = $gets || empty($url) ? array() : explode(C("PATHINFO_DLI"), $url); $a = C("VAR_APP"); if (isset($_GET[$a])) { } elseif (isset($args[0])) { if ($args[0] == $a) { $_GET[$a] = $args[1]; } else { $_GET[$a] = $args[0]; } } else { $_GET[$a] = C("DEFAULT_APP"); } } static public function app() { $query = C('URL_TYPE') == 2 && isset($_GET[C("PATHINFO_VAR")]) ? $_GET[C("PATHINFO_VAR")] : (isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : $_SERVER['QUERY_STRING']); $url = self::parseRoute(str_ireplace(C('PATHINFO_HTML'), '', trim($query, '/'))); $gets = ''; if (!empty($_SERVER['PATH_INFO'])) { $url = str_replace(array('&', '='), C("PATHINFO_DLI"), $url); } else { parse_str($url, $gets); $_GET = array_merge($_GET, $gets); } $args = $gets || empty($url) ? array() : explode(C("PATHINFO_DLI"), $url); if (IS_GROUP && !empty($args)) { if ($args[0] == C("VAR_APP")) { array_shift($args); array_shift($args); } else { array_shift($args); } } if (isset($_GET[C("VAR_CONTROL")])) { } elseif (isset($args[0]) && !empty($args[0])) { if ($args[0] == C("VAR_CONTROL")) { $_GET[C("VAR_CONTROL")] = $args[1]; array_shift($args); array_shift($args); } else { $_GET[C("VAR_CONTROL")] = $args[0]; array_shift($args); } } else { $_GET[C('VAR_CONTROL')] = C('DEFAULT_CONTROL'); } if (isset($_GET[C("VAR_METHOD")])) { } elseif (isset($args[0]) && !empty($args[0])) { if ($args[0] == C("VAR_METHOD")) { $_GET[C("VAR_METHOD")] = $args[1]; array_shift($args); array_shift($args); } else { $_GET[C("VAR_METHOD")] = $args[0]; array_shift($args); } } else { $_GET[C('VAR_METHOD')] = C('DEFAULT_METHOD'); } $_GET[C('VAR_CONTROL')] = ucwords(preg_replace('@_([a-z]?)@ei', 'strtoupper("\1")', $_GET[C('VAR_CONTROL')])); if (!empty($args)) { $count = count($args); for ($i = 0; $i < $count;) { $_GET[$args [$i]] = isset($args [$i + 1]) ? $args [$i + 1] : ''; $i += 2; } } if (C('URL_TYPE') == 2) { unset($_GET[C('PATHINFO_VAR')]); } self::setConst(); } static private function setConst() { $host = $_SERVER['HTTP_HOST'] ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME']; define("__HOST__", C("HTTPS") ? "https://" : "http://" . trim($host, '/')); $documentRoot = str_ireplace($_SERVER['DOCUMENT_ROOT'], '', dirname($_SERVER['SCRIPT_FILENAME'])); $root = empty($documentRoot) ? "" : '/' . trim(str_replace('\\', '/', $documentRoot), '/'); define("__ROOT__", __HOST__ . $root); $url = isset($_SERVER['REDIRECT_URL']) ? rtrim(dirname($_SERVER['SCRIPT_NAME']), '/') : $_SERVER['SCRIPT_NAME']; define("__WEB__", __HOST__ . $url); define("__URL__", __HOST__ . '/' . trim($_SERVER['REQUEST_URI'], '/')); define("__HDPHP__", __HOST__ . '/' . trim(str_ireplace(str_replace('\\', '/', $_SERVER['DOCUMENT_ROOT']), "", HDPHP_PATH), '/')); define("__HDPHP_DATA__", __HDPHP__ . '/Data'); define("__HDPHP_TPL__", __HDPHP__ . '/Lib/Tpl'); define("__HDPHP_EXTEND__", __HDPHP__ . '/Extend'); define("CONTROL", $_GET[C('VAR_CONTROL')]); define("METHOD", $_GET[C('VAR_METHOD')]); switch (C("URL_TYPE")) { case 2: define("__APP__", __WEB__ . (IS_GROUP ? '?' . C('VAR_APP') . '=' . APP : '')); define("__CONTROL__", __APP__ . (IS_GROUP ? '&' . C('VAR_CONTROL') . '=' . CONTROL : '?c=' . CONTROL)); define("__METH__", __CONTROL__ . '&' . C('VAR_METHOD') . '=' . METHOD); break; case 3: define("__APP__", __WEB__ . '?' . C("PATHINFO_VAR") . '=' . (IS_GROUP ? '/' . APP : '')); define("__CONTROL__", __APP__ . '/' . CONTROL); define("__METH__", __CONTROL__ . '/' . METHOD); break; case 1: default: define("__APP__", __WEB__ . (IS_GROUP ? '/' . APP : '')); define("__CONTROL__", __APP__ . '/' . CONTROL); define("__METH__", __CONTROL__ . '/' . METHOD); break; } if(defined("GROUP_PATH")) defined("__GROUP__") or define("__GROUP__", __ROOT__ . '/' . str_replace(ROOT_PATH, '', str_replace('\\', '/', realpath(GROUP_PATH)))); defined("__TPL__") or define("__TPL__", __ROOT__ . '/' . str_replace(ROOT_PATH, '', str_replace('\\', '/', realpath(TPL_PATH)))); defined("__CONTROL_TPL__") or define("__CONTROL_TPL__",__TPL__ . '/' . CONTROL); defined("__STATIC__") or define("__STATIC__", __TPL__ . '/Static'); defined("__PUBLIC__") or define("__PUBLIC__", __TPL__ . '/Public'); defined("__COMMON__") or define("__COMMON__", __ROOT__ . '/Common'); defined("__TEMPLATE__") or define("__TEMPLATE__", __ROOT__ . '/Template'); } static private function parseRoute($query) { $route = C("ROUTE"); if (!$route or !is_array($route)) return $query; foreach ($route as $k => $v) { if (preg_match("@^/.*/[isUx]*$@i", $k)) { if (preg_match($k, $query)) { $v = str_replace('#', '\\', $v); return preg_replace($k, $v, $query); } continue; } $search = array( '@(:year)@i', '@(:month)@i', '@(:day)@i', '@(:num)@i', '@(:any)@i', '@(:[a-z0-9]+\\\d)@i', '@(:[a-z0-9]+\\\w)@i', '@(:[a-z0-9]+)@i' ); $replace = array( '\d{4}', '\d{1,2}', '\d{1,2}', '\d+', '.+', '\d+', '\w+', '([a-z0-9]+)' ); $base_preg = "@^" . preg_replace($search, $replace, $k) . "$@i"; if (!preg_match($base_preg, $query)) { continue; } if (!strstr($k, ":")) { return $v; } $vars = ""; preg_match('/[^:\sa-z0-9]/i', $k, $vars); if (isset($vars[0])) { $roles_ex = explode($vars[0], $k); $url_args = explode($vars[0], $query); } else { $roles_ex = array($k); $url_args = array($query); } $query = $v; foreach ($roles_ex as $m => $n) { if (!strstr($n, ":")) { continue; } $_GET[str_replace(":", "", $n)] = $url_args[$m]; } return $query; } return $query; } static public function toUrl($url) { $route = C("route"); if (!$route) { return $url; } foreach ($route as $routeKey => $routeVal) { $routeKey = trim($routeKey); if (substr($routeKey, 0, 1) === '/') { $regGroup = array(); preg_match_all("@\(.*?\)@i", $routeKey, $regGroup, PREG_PATTERN_ORDER); $searchRegExp = $routeVal; for ($i = 0, $total = count($regGroup[0]); $i < $total; $i++) { $searchRegExp = str_replace('#' . ($i + 1), $regGroup[0][$i], $searchRegExp); } $urlArgs = array(); preg_match_all("@" . $searchRegExp . "@i", $url, $urlArgs, PREG_SET_ORDER); if ($urlArgs) { $routeUrl = trim(str_replace(array('/^', '$/'), '', $routeKey), '/'); foreach ($regGroup[0] as $k => $v) { $routeUrl = str_replace($v, $urlArgs[0][$k + 1], $routeUrl); } return trim($routeUrl, '/'); } } else { $routeGetVars = array(); preg_match_all('/:([a-z]*)/i', $routeKey, $routeGetVars, PREG_PATTERN_ORDER); $getRouteUrl = $routeVal; switch (C("URL_TYPE")) { case 1: $getRouteUrl .= '/'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl .= $getV . '/(.*)/'; } $getRouteUrl = '@' . trim($getRouteUrl, '/') . '@i'; break; case 2: $getRouteUrl .= '&'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl .= $getV . '=(.*)' . '&'; } $getRouteUrl = '@' . trim($getRouteUrl, '&') . '@i'; break; } $getArgs = array(); preg_match_all($getRouteUrl, $url, $getArgs, PREG_SET_ORDER); if ($getArgs) { $newUrl = $routeKey; foreach ($routeGetVars[0] as $rk => $getName) { $newUrl = str_replace($getName, $getArgs[0][$rk + 1], $newUrl); } return $newUrl; } } } return $url; } static public function removeUrlParam($var, $url = null) { $pathinfo_dli = C("PATHINFO_DLI"); if (!is_null($url)) { $url_format = strstr($url, "&") ? $url . '&' : $url . $pathinfo_dli; $url = str_replace($pathinfo_dli, "###", $url_format); $search = array( "/$var" . "###" . ".*?" . "###" . "/", "/$var=.*?&/i", "/\?&/", "/&&/" ); $replace = array( "", "", "?", "" ); $url_replace = preg_replace($search, $replace, $url); $url_rtrim = rtrim(rtrim($url_replace, "&"), "###"); return str_replace("###", $pathinfo_dli, $url_rtrim); } $get = $_GET; unset($get[C("VAR_APP")]); unset($get[C("VAR_CONTROL")]); unset($get[C("VAR_METHOD")]); $url = ''; $url_type = C("URL_TYPE"); foreach ($get as $k => $v) { if ($k === $var) continue; if ($url_type == 1) { $url .= $pathinfo_dli . $k . $pathinfo_dli . $v; } else { $url .= "&" . $k . "=" . $v; } } $url_rtrim = trim(trim($url, $pathinfo_dli), '&'); $url_str = empty($url_rtrim) ? "" : $pathinfo_dli . $url_rtrim; if ($url_type == 1) { return __METH__ . $url_str; } else { return __METH__ . "&" . trim($url_str, "&"); } } }class Log { static $log = array(); static public function set($message, $logType) { if (DEBUG or !C("LOG_SAVE")) return; $type = substr(FriendlyErrorType($logType), 2); if (in_array($type, array_change_value_case(C("LOG_TYPE"), 1))) { $date = date("y-m-d h:i:s"); self::$log[] = $message . "\n"; } } static public function save($type = 3, $destination = NULL, $extraHeaders = NULL) { if (DEBUG || !C("LOG_SAVE") || empty(self::$log)) return; if (is_null($destination)) { $destination = LOG_PATH . date("Y-m-d") . '-' . substr(md5(C("LOG_KEY")), 0, 5) . ".log"; } if ($type == 3) { if (is_file($destination) && filesize($destination) > C("LOG_SIZE")) { $num = count(glob(LOG_PATH . date("Y-m-d") . '-' . substr(md5(C("LOG_KEY")), 0, 5) . "-*")); rename($destination, substr($destination, 0, -4) . "-" . $num . ".log"); } } error_log(implode("", self::$log), $type, $destination, $extraHeaders); self::$log = array(); } static public function write($message, $type = 3, $destination = NULL, $extraHeaders = NULL) { if (DEBUG || !C("LOG_SAVE")) return; Dir::create(LOG_PATH); if (is_null($destination)) { $destination = LOG_PATH . date("Y-m-d") . '-' . substr(md5(C("LOG_KEY")), 0, 5) . ".log"; } if ($type == 3) { if (is_file($destination) && filesize($destination) > C("LOG_SIZE")) { $num = count(glob(LOG_PATH . date("Y-m-d") . '-' . substr(md5(C("LOG_KEY")), 0, 5) . "-*")); rename($destination, substr($destination, 0, -4) . "-" . $num . ".log"); } } error_log($message."\n", $type, $destination, $extraHeaders = null); } }abstract class Event { abstract function run(&$param); protected $options = array(); public function __construct() { if (!empty($this->options)) { foreach ($this->options as $name => $value) { if (is_null(C($name))) { C($name, $this->options[$name]); } else { $this->options[$name] = C($name); } } } } }function M($tableName = null, $full = null) { return new Model($tableName, $full); } function K($model, $table = false) { $info = explode('/', trim($model, '/')); $class = ""; $path = ""; switch (count($info)) { case 1: $class = $info[0] . C('MODEL_FIX'); $path = APP_PATH . 'Model/'; break; case 2: $class = $info[1] . C('MODEL_FIX'); $path = APP_PATH . '../' . $info[0] . '/Model/'; break; default: $class = basename($model) . C('MODEL_FIX'); $path = dirname($model); } $class = ucfirst($class); if (!import($class, $path)) { error(L("functions_k_is_file") . $path . $class . '.class.php', false); } if (!class_exists($class, false)) { error(L("functions_k_error") . $class, false); } $table = $table === false ? substr(strtolower($class), 0, -strlen(C("MODEL_FIX"))) : $table; return new $class($table); } function R($tableName = null, $full = null) { return new relationModel($tableName, $full); } function V($tableName = null, $full = null) { return new ViewModel($tableName, $full); } function F($name, $value = false, $path = CACHE_PATH) { $_cache = array(); $name = md5($name); $cacheFile = rtrim($path, '/') . '/' . $name . '.php'; if (is_null($value)) { if (is_file($cacheFile)) { unlink($cacheFile); unset($_cache[$name]); } return true; } if ($value === false) { if (isset($_cache[$name])) return $_cache[$name]; return is_file($cacheFile) ? include $cacheFile : null; } $data = "<?php if(!defined('HDPHP_PATH'))exit;\nreturn " . compress(var_export($value, true)) . ";\n?>"; is_dir($path) || dir_create($path); if (!file_put_contents($cacheFile, $data)) { return false; } $_cache[$name] = $data; return true; } function S($name, $value = false, $expire = null, $options = array()) { static $_data = array(); $cacheObj = Cache::init($options); if (is_null($value)) { return $cacheObj->del($name); } $driver = isset($options['Driver']) ? $options['Driver'] : ''; $key = $name . $driver; if ($value === false) { if (isset($_data[$key])) { Debug::$cache['read_s']++; return $_data[$key]; } else { return $cacheObj->get($name, $expire); } } $cacheObj->set($name, $value, $expire); $_data[$key] = $value; return true; } function control($control) { $pathArr = explode('/', trim($control, '/')); switch (count($pathArr)) { case 1: $base = APP_PATH . 'Control/' . $pathArr[0]; break; case 2: $base = APP_PATH . '../' . $pathArr[0] . '/Control/' . $pathArr[1]; break; } $class = basename($base) . C('CONTROL_FIX'); if (require_cache($base . C('CONTROL_FIX') . '.class.php')) { if (class_exists($class)) return new $class; } return false; } function session($name = false, $value = '') { static $_start = false; if ($name === false) return $_SESSION; if ($_start === false) { $_start = true; session_id() || session_start(); } if (is_null($name)) { $_SESSION = array(); session_unset(); session_destroy(); } elseif (is_null($value)) { unset($_SESSION[$name]); } elseif (empty($value)) { switch (strtolower($name)) { case "[parse]": session_write_close(); break; } return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } else { $_SESSION[$name] = $value; } } function O($class, $method = '', $args = array()) { static $result = array(); $name = empty($args) ? $class . $method : $class . $method . md5_d($args); if (!isset($result [$name])) { $class = new $class (); if (!empty($method) && method_exists($class, $method)) { if (!empty($args)) { $result [$name] = call_user_func_array(array(&$class, $method), $args); } else { $result [$name] = $class->$method(); } } else { $result [$name] = $class; } } return $result [$name]; } function C($name = null, $value = null) { static $config = array(); if (is_null($name)) { return $config; } if (is_array($value)) { $value = array_change_key_case_d($value); } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)) { if (isset($config[$name]) && !is_array($config[$name])) { $config[$name] = trim($config[$name]); } return isset($config [$name]) ? $config [$name] : null; } if($name=='language'){ is_file(COMMON_LANGUAGE_PATH . $value.'.php') and L(require COMMON_LANGUAGE_PATH . $value.'.php'); is_file(LANGUAGE_PATH . $value.'.php') and L(require LANGUAGE_PATH . $value.'.php'); } $config [$name] = isset($config[$name]) && is_array($config[$name]) && is_array($value) ? array_merge($config[$name], $value) : $value; return $config[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($config [$name[0]] [$name[1]]) ? $config [$name[0]][$name[1]] : null; } $config [$name[0]] [$name[1]] = $value; } if (is_array($name)) { $config = array_merge($config, array_change_key_case_d($name, 0)); return true; } } function L($name = null, $value = null) { static $languge = array(); if (is_null($name)) { return $languge; } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)) return isset($languge [$name]) ? $languge [$name] : null; $languge [$name] = $value; return $languge[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($languge [$name[0]] [$name[1]]) ? $languge [$name[0]][$name[1]] : null; } $languge [$name[0]] [$name[1]] = $value; } if (is_array($name)) { $languge = array_merge($languge, array_change_key_case_d($name)); return true; } } function event($name, $param = null) { $core = C("CORE_EVENT." . $name); $group = C("GROUP_EVENT." . $name); $event = C("APP_EVENT." . $name); if (is_array($group)) { if ($core) { $group = array_merge($core, $group); } } else { $group = $core; } if (is_array($group)) { if ($event) { $event = array_merge($group, $event); } } if (is_array($event)) { foreach ($event as $e) { E($e, $param); } } } function E($name, &$params = null) { $class = $name . "Event"; $event = new $class; $event->run($params); } function show($var) { echo "<pre>" . print_r($var, true) . "</pre>"; } function p($var) { show($var); } function dump($var) { show($var); } function go($url, $time = 0, $msg = '') { $url = U($url); if (!headers_sent()) { $time == 0 ? header("Location:" . $url) : header("refresh:{$time};url={$url}"); exit($msg); } else { echo "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time) exit($msg); } } function ip_get_client($type = 0) { $ip = ''; if (isset($_SERVER)) { if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) { $ip = $_SERVER["HTTP_X_FORWARDED_FOR"]; } else if (isset($_SERVER["HTTP_CLIENT_IP"])) { $ip = $_SERVER["HTTP_CLIENT_IP"]; } else { $ip = $_SERVER["REMOTE_ADDR"]; } } else { if (getenv("HTTP_X_FORWARDED_FOR")) { $ip = getenv("HTTP_X_FORWARDED_FOR"); } else if (getenv("HTTP_CLIENT_IP")) { $ip = getenv("HTTP_CLIENT_IP"); } else { $ip = getenv("REMOTE_ADDR"); } } $long = ip2long($ip); $clientIp = $long ? array($ip, $long) : array("0.0.0.0", 0); return $clientIp[$type]; } function ajax_request() { if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') return true; return false; } function addslashes_d($data) { if (is_string($data)) { return addslashes($data); } if (is_numeric($data)) { return $data; } if (is_array($data)) { $var = array(); foreach ($data as $k => $v) { if (is_array($v)) { $var[$k] = addslashes_d($v); continue; } else { $var[$k] = addslashes($v); } } return $var; } } function stripslashes_d($data) { if (empty($data)) { return $data; } elseif (is_string($data)) { return stripslashes($data); } elseif (is_array($data)) { $var = array(); foreach ($data as $k => $v) { if (is_array($v)) { $var[$k] = stripslashes_d($v); continue; } else { $var[$k] = stripslashes($v); } } return $var; } } function array_to_String($array, $level = 0) { if (!is_array($array)) { return "'" . $array . "'"; } $space = ''; for ($i = 0; $i <= $level; $i++) { $space .= "\t"; } $arr = "Array\n$space(\n"; $c = $space; foreach ($array as $k => $v) { $k = is_string($k) ? '\'' . addcslashes($k, '\'\\') . '\'' : $k; $v = !is_array($v) && (!preg_match("/^\-?[1-9]\d*$/", $v) || strlen($v) > 12) ? '\'' . addcslashes($v, '\'\\') . '\'' : $v; if (is_array($v)) { $arr .= "$c$k=>" . array_to_String($v, $level + 1); } else { $arr .= "$c$k=>$v"; } $c = ",\n$space"; } $arr .= "\n$space)"; return $arr; } if (!function_exists('json_encode')) { function json_encode($value) { $json = new json(); return $json->encode($value); } } if (!function_exists('json_decode')) { function json_decode($json_value, $bool = false) { $json = new json(); return $json->decode($json_value, $bool); } } function mobile_area($mobile) { require_cache(HDPHP_EXTEND_PATH . "Org/Mobile/Mobile.class.php"); return Mobile::area($mobile); } if (!function_exists('image_type_to_extension')) { function image_type_to_extension($type, $dot = true) { $e = array(1 => 'gif', 'jpeg', 'png', 'swf', 'psd', 'bmp', 'tiff', 'tiff', 'jpc', 'jp2', 'jpf', 'jb2', 'swc', 'aiff', 'wbmp', 'xbm'); $type = (int)$type; return ($dot ? '.' : '') . $e[$type]; } } function rand_str($len = 6) { $data = 'abcdefghijklmnopqrstuvwxyz0123456789'; $str = ''; while (strlen($str) < $len) $str .= substr($data, mt_rand(0, strlen($data) - 1), 1); return $str; } function encrypt($data, $key = null) { return encry::encrypt($data, $key); } function decrypt($data, $key = null) { return encry::decrypt($data, $key); } function data_format($data, $func = null) { $functions = is_null($func) ? array("htmlspecialchars", "addslashes") : (is_array($func) ? $func : preg_split("/\s*,\s*/", $func)); foreach ($functions as $_func) { if (is_string($data)) { $_func($data); } else if (is_array($data)) { foreach ($data as $k => $d) { $data[$k] = is_array($d) ? data_format($d, $functions) : $_func($d); } } } return $data; } function _default($varName, $value = "") { return isset($varName) ? $varName : $value; } function _request($method, $varName = null, $html = true) { $method = strtolower($method); switch ($method) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method, 2)); case 'get' : $data = & $_GET; break; case 'post' : $data = & $_POST; break; case 'request' : $data = & $_REQUEST; break; case 'Session' : $data = & $_SESSION; break; case 'cookie' : $data = & $_COOKIE; break; case 'server' : $data = & $_SERVER; break; case 'globals' : $data = & $GLOBALS; break; default: throw_exception('abc'); } if (is_null($varName)) return $data; if (isset($data[$varName]) && $html) { $data[$varName] = htmlspecialchars($data[$varName]); } return isset($data[$varName]) ? $data[$varName] : null; } function _404($msg = "", $filePath = "") { DEBUG && error($msg); Log::write($msg); if (empty($filePath) && C("404_TPL")) { $filePath = C("404_TPL"); } if (!is_file($filePath) || !is_readable($filePath)) { $filePath = HDPHP_TPL_PATH . '/404.html'; } set_http_state(404); include $filePath; exit; } function set_http_state($code) { $state = array( 200 => 'OK', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 400 => 'Bad Request', 403 => 'Forbidden', 404 => 'Not Found', 500 => 'Internal Server Error', 503 => 'Service Unavailable', ); if (isset($state[$code])) { header('HTTP/1.1 ' . $code . ' ' . $state[$code]); header('Status:' . $code . ' ' . $state[$code]); } } function is_ssl() { if (isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))) { return true; } elseif (isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'])) { return true; } return false; } function print_const($view = true, $tplConst = false) { $define = get_defined_constants(true); $const = $define['user']; if ($tplConst) { $const = array(); foreach ($define['user'] as $k => $d) { if (preg_match('/^__/', $k)) { $const[$k] = $d; } } } if ($view) { p($const); } else { return $const; } } function date_before($time, $unit = null) { if (!is_int($time)) return false; $unit = is_null($unit) ? array("年", "月", "星期", "日", "小时", "分钟", "秒") : $unit; switch (true) { case $time < (NOW - 31536000): return floor((NOW - $time) / 31536000) . $unit[0]; case $time < (NOW - 2592000): return floor((NOW - $time) / 2592000) . $unit[1]; case $time < (NOW - 604800): return floor((NOW - $time) / 604800) . $unit[2]; case $time < (NOW - 86400): return floor((NOW - $time) / 86400) . $unit[3]; case $time < (NOW - 3600): return floor((NOW - $time) / 3600) . $unit[4]; case $time < (NOW - 60): return floor((NOW - $time) / 60) . $unit[5]; default: return floor(NOW - $time) . $unit[6]; } }function U($pathinfo, $args = array()) { if (preg_match("/^https?:\/\//i", $pathinfo)) return $pathinfo; $end = strpos($pathinfo, '.php'); if ($end) { $web = __ROOT__ . '/' . substr($pathinfo, 0, $end + 4); $pathinfo = substr($pathinfo, $end + 4); } else { $web = __WEB__; } if (is_string($args)) { parse_str($args, $args); } $parseUrl = parse_url(trim($pathinfo, '/')); $path = trim($parseUrl['path'], '/'); if (isset($parseUrl['query'])) { parse_str($parseUrl['query'], $query); $args = array_merge($query, $args); } $gets = array(); if (is_array($args)) { foreach ($args as $n => $q) { array_push($gets, $n); array_push($gets, $q); } } $vars = explode("/", $path); $urlType = C("URL_TYPE"); switch ($urlType) { case 1: $root = $web . '/'; break; case 2: $root = $web . '?'; break; } $set_app_group = false; if (defined("GROUP_PATH")) { $set_app_group = true; } $data = array(); switch (count($vars)) { case 2: if ($set_app_group) { $data[] = C("VAR_APP"); $data[] = APP; } $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; case 1: if ($set_app_group) { $data[] = C("VAR_APP"); $data[] = APP; } $data[] = C("VAR_CONTROL"); $data[] = CONTROL; $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; default: $data[] = C("VAR_APP"); $data[] = array_shift($vars); $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); if (is_array($vars)) { foreach ($vars as $v) { $data[] = $v; } } } $varsAll = array_merge($data, $gets); $url = ''; switch ($urlType) { case 1: foreach ($varsAll as $value) { $url .= C('PATHINFO_Dli') . $value; } $url = str_replace(array("/" . C("VAR_APP") . "/", "/" . C("VAR_CONTROL") . "/", "/" . C("VAR_METHOD") . "/"), "/", $url); $url = substr($url, 1); break; case 2: foreach ($varsAll as $k => $value) { if ($k % 2) { $url .= '=' . $value; } else { $url .= '&' . $value; } } $url = substr($url, 1); break; } $pathinfo_html = $urlType === 1 ? '.' . trim(C("PATHINFO_HTML"), '.') : ''; return $root . Route::toUrl($url) . $pathinfo_html . C("PATHINFO_HTML"); } function N($name, $num = NULL) { static $data = array(); if (!isset($data[$name])) { $data[$name] = 0; } if (is_null($num)) { return $data[$name]; } else { $data[$name] += (int)$num; } } function md5_d($var) { return md5(serialize($var)); } function hash_hd($data, $len) { $hash = crc32($data) & 0xfffffff; return $hash % $len; } function dir_create($dirName, $auth = 0755) { $dirName = str_replace("\\", "/", $dirName); $dirPath = rtrim($dirName, '/'); if (is_dir($dirPath)) return true; $dirs = explode('/', $dirPath); $dir = ''; foreach ($dirs as $v) { $dir .= $v . '/'; if (!is_dir($dir)) { @mkdir($dir, $auth, true); } } return is_dir($dirPath); } function require_cache($path = null) { static $_files = array(); $name = strtolower($path); if (is_null($path)) return $_files; if (isset($_files[$name])) { return true; } if (!file_exists_case($path)) { return false; } require($path); $_files[$name] = true; return true; } function load($file) { $file = str_replace(".", "/", preg_replace('@\.php@i', '', $file)); if (!strstr($file, '/')) { $app = LIB_PATH . $file . '.php'; $group = COMMON_LIB_PATH . $file . '.php'; return require_cache($app) || (IS_GROUP && require_cache($group)); } $info = explode('/', $file); if ($info[0] == '@' || APP == $info[0]) { $file = APP_PATH . substr_replace($file, '', 0, strlen($info[0]) + 1); } return require_cache($file); } function import($class = null, $base = null, $ext = ".class.php") { $class = str_replace(".", "/", $class); if (is_null($base)) { $info = explode("/", $class); if ($info[0] == '@' || APP == $info[0]) { $base = APP_PATH; $class = substr_replace($class, '', 0, strlen($info[0]) + 1); } elseif (strtoupper($info[0]) == 'HDPHP') { $base = dirname(substr_replace($class, HDPHP_PATH, 0, 5)); $class = basename($class); } elseif (in_array(strtoupper($info[0]), array("LIB", "ORG"))) { $base = HDPHP_EXTEND_PATH; } else { $base = APP_PATH . '../' . $info[0] . '/'; $class = substr_replace($class, '', 0, strlen($info[0]) + 1); } } $base = rtrim($base, '/') . '/'; $file = $base . $class . $ext; if (!class_exists($class, false)) { return require_cache($file); } return true; } function alias_import($name = null, $path = null) { static $_alias = array(); if (is_null($name)) return $_alias; if (is_string($name)) $name = strtolower($name); if (is_array($name)) { $_alias = array_merge($_alias, array_change_key_case($name)); return true; } elseif (!is_null($path)) { return $_alias[$name] = $path; } elseif (isset($_alias[$name])) { return require_cache($_alias[$name]); } return false; } function require_array($fileArr) { foreach ($fileArr as $file) { if (is_file($file) && require_cache($file)) return true; } return false; } function file_exists_case($file) { if (is_file($file)) { if (IS_WIN && C("CHECK_FILE_CASE")) { if (basename(realpath($file)) != basename($file)) { return false; } } return true; } return false; } function url_param_remove($var, $url = null) { return Route::removeUrlParam($var, $url); } function get_size($size, $decimals = 2) { switch (true) { case $size >= pow(1024, 3): return round($size / pow(1024, 3), $decimals) . " GB"; case $size >= pow(1024, 2): return round($size / pow(1024, 2), $decimals) . " MB"; case $size >= pow(1024, 1): return round($size / pow(1024, 1), $decimals) . " KB"; default: return $size . 'B'; } } function array_defined($arr) { foreach ($arr as $k => $v) { $k = strtoupper($k); if (is_string($v)) { define($k, $v); } elseif (is_numeric($v)) { defined($k, $v); } elseif (is_bool($v)) { $v = $v ? 'true' : 'false'; define($k, $v); } } return true; } function array_change_key_case_d($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); if (!is_array($arr) || empty($arr)) return $newArr; foreach ($arr as $k => $v) { $k = $function($k); if (is_array($v)) { $newArr[$k] = array_change_key_case_d($v, $type); } else { $newArr[$k] = $v; } } return $newArr; } function array_key_exists_d($key, $arr) { return array_key_exists(strtolower($key), array_change_key_case_d($arr)); } function array_change_value_case($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); foreach ($arr as $k => $v) { if (is_array($v)) { $newArr[$k] = array_change_value_case($v, $type); } else { $newArr[$k] = $function($v); } } return $newArr; } function file_merge($files, $space = false, $tag = false) { $str = ''; foreach ($files as $file) { $con = trim(file_get_contents($file)); if ($space) $con = compress($con); $str .= substr($con, -2) == '?>' ? trim(substr($con, 5, -2)) : trim($con, 5); } return $tag ? '<?php if(!defined("HDPHP_PATH")){exit("No direct script access allowed");}' . $str . "\t?>" : $str; } function compress($content) { $str = ""; $data = token_get_all($content); $end = false; for ($i = 0, $count = count($data); $i < $count; $i++) { if (is_string($data[$i])) { $end = false; $str .= $data[$i]; } else { switch ($data[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$end) { $end = true; $str .= " "; } break; case T_START_HEREDOC: $str .= "<<<HDPHP\n"; break; case T_END_HEREDOC: $str .= "HDPHP;\n"; for ($m = $i + 1; $m < $count; $m++) { if (is_string($data[$m]) && $data[$m] == ';') { $i = $m; break; } if ($data[$m] == T_CLOSE_TAG) { break; } } break; default: $end = false; $str .= $data[$i][1]; } } } return $str; } function get_defines($name = "", $value = null, $type = 'user') { if ($name) { $const = get_defined_constants(); return defined($name) ? $const[$name] : $value; } $const = get_defined_constants(true); return $type === true ? $const : $const[$type]; } function throw_exception($msg, $type = "HdphpException", $code = 0) { if (class_exists($type)) { throw new $type($msg, $code); } else { error($msg); } } function error($error) { $e = array(); if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; $e['class'] = isset($trace[0]['class']) ? $trace[0]['class'] : ""; $e['function'] = isset($trace[0]['function']) ? $trace[0]['function'] : ""; ob_start(); debug_print_backtrace(); $e['trace'] = htmlspecialchars(ob_get_clean()); } else { $e = $error; } if (!DEBUG) { Log::write("[Error]" . $e['message'] . " [Time]" . date("y-m-d h:i") . " [File]" . $e['file'] . " [Line]" . $e['line']); Log::save(); if (C("ERROR_URL")) go(C("ERROR_URL")); elseif (C("ERROR_MESSAGE")) $e['message'] = C("ERROR_MESSAGE"); } if (is_file(C('ERROR_TPL'))) include C('ERROR_TPL'); else include HDPHP_TPL_PATH . 'halt.html'; exit; } function FriendlyErrorType($type) { switch ($type) { case E_ERROR: return 'E_ERROR'; case E_WARNING: return 'E_WARNING'; case E_PARSE: return 'E_PARSE'; case E_NOTICE: return 'E_NOTICE'; case E_CORE_ERROR: return 'E_CORE_ERROR'; case E_CORE_WARNING: return 'E_CORE_WARNING'; case E_CORE_ERROR: return 'E_COMPILE_ERROR'; case E_CORE_WARNING: return 'E_COMPILE_WARNING'; case E_USER_ERROR: return 'E_USER_ERROR'; case E_USER_WARNING: return 'E_USER_WARNING'; case E_USER_NOTICE: return 'E_USER_NOTICE'; case E_STRICT: return 'E_STRICT'; case E_RECOVERABLE_ERROR: return 'E_RECOVERABLE_ERROR'; case E_DEPRECATED: return 'E_DEPRECATED'; case E_USER_DEPRECATED: return 'E_USER_DEPRECATED'; } return $type; } function extension_exists($ext) { $ext = strtolower($ext); $loaded_extensions = get_loaded_extensions(); return in_array($ext, array_change_value_case($loaded_extensions, 0)); }if (!defined("HDPHP_PATH")) exit('No direct script access allowed'); abstract class View { protected function getTemplateFile($tplFile) { if (!$tplFile) { $tplFile = METHOD . C("TPL_FIX"); } else { if (count(explode("/", $tplFile)) > 2) { if (!is_file($tplFile)) { throw_exception(L("view_getTemplateFile_error3") . $tplFile); } return $tplFile; } $tplFile = str_replace(C("TPL_FIX"), '', $tplFile) . C("TPL_FIX"); } if (strstr(C("TPL_DIR"), '/') && !strstr($tplFile, '/')) { $tplFile = TPL_PATH . $tplFile; } else { $fileArr = explode("/", $tplFile); $file = array_pop($fileArr); switch (count($fileArr)) { case 0: $tplFile = TPL_PATH . CONTROL . '/' . $tplFile; break; case 1: $tplFile = TPL_PATH . $fileArr[0] . '/' . $file; break; case 2: $tplFile = str_replace(APP, $fileArr[0], TPL_PATH) . '/' . $fileArr[1] . '/' . $file; break; } } if (!is_file($tplFile)) { throw_exception(L("view_getTemplateFile_error3") . $tplFile); } return $tplFile; } }if (!defined("HDPHP_PATH")) exit('No direct script access allowed'); class Compile { private $view; public $content; private $left; private $right; private $condition = array( "\s+neq\s+" => " <> ", "\s+eq\s+" => " == ", "\s+gt\s+" => " > ", "\s+egt\s+" => " >= ", "\s+lt\s+" => " < ", "\s+elt\s+" => " <= ", "\s+=\s+" => "==" ); private $functionAlias = array( "default" => "_default" ); function __construct($view) { $this->left = C("TPL_TAG_LEFT"); $this->right = C("TPL_TAG_RIGHT"); $this->view = $view; } public function run() { $this->content = file_get_contents($this->view->tplFile); $this->loadParseTags(); $this->replaceGlobalFunc(); $this->compile(); $this->parseTokey(); $this->replaceConst(); $this->content = '<?php if(!defined("HDPHP_PATH"))exit;C("SHOW_WARNING",false);?>' . $this->content; if (!is_dir(COMPILE_PATH)) { Dir::create(COMPILE_PATH); copy(HDPHP_TPL_PATH . 'index.html', COMPILE_PATH . 'index.html'); } file_put_contents($this->view->compileFile, $this->content); } private function replaceLangConfig($content) { $preg = array( '/\$hd.config\.(\w+)\s*/is', '/\$hd.language\.(\w+)\s*/is' ); $replace = array( 'C("\1")', 'L("\1")' ); return preg_replace($preg, $replace, $content); } private function replaceGlobalFunc() { $this->content = preg_replace('/\{\|(\w+):(.*?)\}/i', '<?php echo \1(\2);?>', $this->content); $this->content = preg_replace('/\{\|(\w+)\((.*?)\}/i', '<?php echo \1(\2;?>', $this->content); } private function loadParseTags() { $tagClass = array(); $tags = C('TPL_TAGS'); if (!empty($tags) && is_array($tags)) { foreach ($tags as $k) { $arr = explode('.', $k); $count = count($arr); $tagClass[] = $arr[$count - 1]; if (class_exists($arr[$count - 1], false)) { continue; } if ($count > 1) { switch (count($arr)) { case 2: $tagFile = GROUP_PATH . $arr[0] . '/Lib/' . $arr[1] . '.class.php'; break; case 3: $tagFile = GROUP_PATH . $arr[0] . '/' . $arr[1] . '/Lib/' . $arr[1] . '.Tool.php'; break; } if (!require_cache($tagFile)) { error("标签库文件" . $tagFile . "不存在"); } } } } import('HDPHP.Lib.Driver.View.Hd.HdBaseTag'); $tagClass[] = 'hdBaseTag'; $this->parseTagClass($tagClass); } private function parseTagClass($tagClass) { foreach ($tagClass as $class) { $tagObj = new $class(); $tagMethod = get_class_methods($class); foreach ($tagMethod as $tagName) { $block = 1; $level = 1; $tagName = substr($tagName, 1); if (isset($tagObj->tag)) { $tagSet = $tagObj->tag; $block = isset($tagSet[$tagName]['block']) ? $tagSet[$tagName]['block'] : 1; $level = isset($tagSet[$tagName]['level']) ? $tagSet[$tagName]['level'] : 1; } for ($i = 0; $i < $level; $i++) { if (!$this->compileTag($tagName, $tagObj, $block)) { $i = 100; } } } } } private function compileTag($tagName, &$tagObj, $block = 1) { $arr = ''; if ($block) { $preg = '/' . $this->left . $tagName . "(?:\s+(.*)" . $this->right . "|" . $this->right . ")(.*)" . substr($this->left, 0, 1) . "\/" . substr($this->left, 1) . $tagName . $this->right . '/isU'; } else { $preg = '/' . $this->left . $tagName . '(?:\s+(.*)\/?' . $this->right . "|(\s*)\/?" . $this->right . ")/isU"; } $stat = preg_match_all($preg, $this->content, $arr, PREG_SET_ORDER); if (!$stat) { return false; } foreach ($arr as $k) { $k[1] = $this->replaceCondition($k[1]); $attr = $this->getTagAttr($k[1]); $k[2] = isset($k[2]) ? $k['2'] : ''; $content = call_user_func_array(array($tagObj, '_' . $tagName), array($attr, $k[2], $this)); $this->content = str_replace($k[0], $content, $this->content); } return true; } private function getTagAttr($attrCon) { $pregAttr = '/\s*' . '(\w+)\s*=\s*(["\'])(.*)\2/iU'; $attrs = ''; preg_match_all($pregAttr, $attrCon, $attrs, PREG_SET_ORDER); $attrArr = array(); foreach ($attrs as $k) { $k[3] = trim($this->parsePhpVar($k[3])); $attrArr[$k[1]] = strstr($k[3], '$') ? $k[3] : (is_numeric($k[3]) ? $k[3] : (defined($k[3]) ? $k[3] : $k[3])); } return array_change_key_case($attrArr); } private function parseVar($content) { $stripContent = stripslashes($content); $parseConstContent = $this->parseConst($stripContent); $content = $this->parsePhpVar($parseConstContent, 1); return $content; } private function replaceCondition($content) { foreach ($this->condition as $k => $v) { $content = preg_replace("/$k/", $v, $content); } return $content; } private function parsePhpVar($content, $type = 0) { $parseConstCon = $this->parseConst($content); $parseGlobalCon = $this->parseGlobalConst($parseConstCon); $replaceLangCon = $this->replaceLangConfig($parseGlobalCon); $content = $this->removeEmpty($replaceLangCon); if ($type == 0) { $preg = '/([\'\"]?)(\$[^=!<>\s\)\(]+)\1/is'; } else { $preg = '/([\'\"]?)(\$[^=!<>\)\(]+)\1/is'; } $vars = false; preg_match_all($preg, $content, $vars, PREG_SET_ORDER); if (empty($vars)) { return $content; } foreach ($vars as $v) { $v[2] = trim($v[2]); $content = str_replace($v[2], $this->formatVar($v[2]), $content); } return $content; } private function parseGlobalConst($content) { $preg = '/\$Hd.(get|post|request|cookie|Session)\./ise'; $replace = '\'\$_\'.strtoupper("\1").".";'; return preg_replace($preg, $replace, $content); } private function removeEmpty($content) { $preg = array( '/[{}]/', '/\s*\|\s*/', '/\s*:\s*/', '/\s*,\s*/', ); $replace = array( '', '|', ':', ',', ); return preg_replace($preg, $replace, $content); } private function formatVar($var) { $varArr = preg_split("/\s*\|\s*/", $var); $varBase = array_shift($varArr); $func = $varArr; $preg = array( "/\.\'/", "/'\./", '/\."/', '/"\./', '/{/', '/}/', ); $replace = array( "/\./", "/\./", '/\./', '/\./', '/{/', '/}/', ); $con = preg_replace($preg, $replace, $varBase); $var = explode('.', $con); $varName = array_shift($var); $varStr = ''; if (count($var) > 0) { foreach ($var as $v) { $varStr .= is_numeric($v) || strstr($v, '$') ? "[{$v}]" : '[\'' . $v . '\']'; } } $varName .= str_replace("]'", "']", $varStr); if (!empty($func)) { if (!function_exists("replaceyinhao")) { function replaceyinhao($con) { return "'" . str_replace(":", "####", $con[2]) . "'"; } } foreach ($func as $function) { $function = preg_replace_callback('/(\'|")(.*)\1/i', "replaceyinhao", $function); $funcArr = explode(":", $function); $functionName = array_shift($funcArr); $funcName = array_key_exists($functionName, $this->functionAlias) ? $this->functionAlias[$functionName] : $functionName; if (isset($funcArr[0])) { if (strstr($funcArr[0], "@@")) { $varName = str_replace("@@", trim($varName, ','), $funcArr[0]); } else { $varName = trim($varName, ',') . ',' . $funcArr[0]; } } $varName = str_replace("####", ":", $varName); $varName = $funcName . '(' . trim($varName, ',') . '),'; } } return trim($varName, ','); } private function compile() { $preg = '/{(\$[^=!<>\)\(\+\;]+)}/ieU'; $this->content = preg_replace($preg, '\'<?php echo \'. $this->parseVar(\'\1\').\';?>\';', $this->content); } private function parseConst($content) { $preg = '/\$Hd[\.\[]([\'"])?const\1?[\.\]]([^=!<>\}]*)/is'; if (!function_exists("replace_view_const")) { function replace_view_const($args) { $name = strtoupper($args[2]); return defined($name) ? $name : $args[2]; } } return preg_replace_callback($preg, "replace_view_const", $content); } private function parseTokey() { if (!C("TOKEN_ON")) return; Token::create(); $preg = '/<\/form>/iUs'; $content = '<input type="hidden" name="<?php echo C("TOKEN_NAME");?>" value="<?php echo $_SESSION[C("TOKEN_NAME")]?>"/></form>'; $this->content = preg_replace($preg, $content, $this->content); } private function replaceConst() { $const = print_const(false, true); foreach ($const as $k => $v) { if (!strstr($k, '__')) continue; $this->content = str_replace($k, $v, $this->content); } } }C(array ( 'charset' => 'utf8', 'default_time_zone' => 'PRC', 'html_path' => 'h', 'debug_show' => 1, 'language' => '', 'auth_key' => 'houdunwang', 'check_file_case' => 0, 'auto_load_file' => '', '404_tpl' => '/var/www/meituan/hdphp/Lib/Tpl/404.html', 'db_driver' => 'mysqli', 'db_host' => '127.0.0.1', 'db_port' => 3306, 'db_user' => 'root', 'db_password' => '', 'db_database' => '', 'db_prefix' => '', 'db_field_cache' => 1, 'db_backup' => '/var/www/meituan/backup/1388332341', 'token_on' => 0, 'token_name' => '__TOKEN__', 'error_message' => '出错了！开启DEBUG或查看Log文件', 'error_tpl' => '/var/www/meituan/hdphp/Lib/Tpl/halt.html', 'debug_menu' => 1, 'show_warning' => 1, 'show_system' => 1, 'show_cache' => 1, 'show_include' => 1, 'show_sql' => 1, 'show_tpl_compile' => 1, 'log_save' => 1, 'log_key' => 'houdunwang.com', 'log_size' => 2000000, 'log_type' => array ( ), 'session_auto' => 1, 'session_name' => 'hdsid', 'session_engine' => 'file', 'session_save_path' => '', 'session_lifetime' => 1440, 'session_table_name' => 'session', 'session_gc_divisor' => 10, 'session_memcache' => array ( 'host' => '127.0.0.1', 'port' => 11211, ), 'session_redis' => array ( 'host' => '127.0.0.1', 'port' => 6379, 'password' => '', 'db' => 0, ), 'https' => false, 'url_rewrite' => 1, 'url_type' => 1, 'pathinfo_dli' => '/', 'pathinfo_var' => 'q', 'pathinfo_html' => '.html', 'var_app' => 'a', 'var_control' => 'c', 'var_method' => 'm', 'default_name' => '@', 'default_app' => 'index', 'default_control' => 'Index', 'default_method' => 'index', 'control_fix' => 'Control', 'model_fix' => 'Model', 'filter_function' => 'htmlspecialchars', 'route' => array ( ), 'cache_type' => 'file', 'cache_memcache' => array ( 'host' => '127.0.0.1', 'port' => 11211, 'timeout' => 1, 'weight' => 1, 'pconnect' => 1, ), 'cache_redis' => array ( 'host' => '127.0.0.1', 'port' => 6379, 'password' => '', 'timeout' => 1, 'db' => 0, 'pconnect' => 0, ), 'cache_time' => 3600, 'cache_select_time' => -1, 'cache_select_length' => 30, 'cache_tpl_time' => -1, 'upload_thumb_on' => 0, 'upload_ext_size' => array ( 'jpg' => 5000000, 'jpeg' => 5000000, 'gif' => 5000000, 'png' => 5000000, 'bmg' => 5000000, 'zip' => 5000000, 'txt' => 5000000, 'rar' => 5000000, 'doc' => 5000000, ), 'upload_path' => '/var/www/meituan//upload', 'upload_img_dir' => '', 'upload_img_resize_on' => 1, 'upload_img_max_width' => 2000000, 'upload_img_max_height' => 2000000, 'water_on' => 1, 'water_font' => '/var/www/meituan/hdphp/Data/Font/font.ttf', 'water_img' => '/var/www/meituan/hdphp/Data/Image/water.png', 'water_pos' => 9, 'water_pct' => 60, 'water_quality' => 80, 'water_text' => 'WWW.HOUDUNWANG.COM', 'water_text_color' => '#f00f00', 'water_text_size' => 12, 'thumb_prefix' => '', 'thumb_endfix' => '_thumb', 'thumb_type' => 6, 'thumb_width' => 300, 'thumb_height' => 300, 'thumb_path' => '', 'code_font' => '/var/www/meituan/hdphp/Data/Font/font.ttf', 'code_str' => '123456789abcdefghijklmnpqrstuvwsyz', 'code_width' => 150, 'code_height' => 45, 'code_bg_color' => '#ffffff', 'code_len' => 4, 'code_font_size' => 22, 'code_font_color' => '', 'page_var' => 'page', 'page_row' => 10, 'page_show_row' => 10, 'page_style' => 2, 'page_desc' => array ( 'pre' => '上一页', 'next' => '下一页', 'first' => '首页', 'end' => '尾页', 'unit' => '条', ), 'tpl_engine' => 'HD', 'tpl_fix' => '.html', 'tpl_tag_left' => '<', 'tpl_tag_right' => '>', 'tpl_dir' => 'Tpl', 'tpl_tags' => array ( ), 'tpl_style' => '', 'tpl_compile' => 1, 'tpl_error' => '', 'tpl_success' => '', 'cart_name' => 'cart', 'editor_type' => 2, 'editor_style' => 1, 'editor_max_str' => 2000, 'editor_width' => '100%', 'editor_height' => 300, 'editor_file_size' => 2000000, 'rbac_type' => 1, 'rbac_super_admin' => 'super_admin', 'rbac_username_field' => 'username', 'rbac_password_field' => 'password', 'rbac_auth_key' => 'uid', 'rbac_no_auth' => array ( ), 'rbac_user_table' => 'user', 'rbac_role_table' => 'role', 'rbac_node_table' => 'node', 'rbac_role_user_table' => 'user_role', 'access_table' => 'access', 'email_username' => '', 'email_password' => '', 'email_host' => '', 'email_port' => 25, 'email_ssl' => 0, 'email_charset' => '', 'email_formmail' => '', 'email_fromname' => '后盾网', 'core_event' => array ( ), ));L(array ( 'functions_k_is_file' => '模型文件不存在', 'functions_k_error' => '模型类不存在', 'functions_control_error' => ' 控制器文件中没有定义类', 'functions_load_file_debug' => '文件不存在', 'functions_error_debug' => '查看详细错误信息方法有两种： ① 查看网站日志文件  ② 开启调试模式', 'control_error_msg' => '出错了', 'control_success_msg' => '操作成功', 'hd_mkdirs_path_temp' => '临时目录创建失败，请修改权限！', 'hd_mkdirs_path_log' => '日志目录创建失败，请修改权限！', 'hd_mkdirs_path_session' => 'SESSION目录目录创建失败，请修改权限！', 'mysql_select_error' => '没有可操作的数据表', 'mysql_insert_error' => '没有任何数据要插入,系统会将$_POST值自动插入，也可以手动将数据传入或者用ORM方式，请查看HD手册学习', 'mysql_insert_error2' => '插入数据错误，原因可能为1：插入内容为空   2：字段名非法，看一下HD框架手册吧！', 'mysql_replace_error1' => '没有任何数据要插入,系统会将$_POST值自动插入，也可以手动将数据传入或者用ORM方式，请查看HD手册学习', 'mysql_replace_error2' => '插入数据错误，原因可能为1：插入内容为空   2：字段名非法，看一下HD框架手册吧！', 'mysql_update_error1' => '没有任何数据要更新,系统会将$_POST值自动更新，也可以手动将数据传入或者用ORM方式，请查看HD手册学习', 'mysql_update_error2' => 'UPDATE更新语句必须输入条件,如果更新数据有表的主键字段也可以做为条件使用', 'mysql_update_error3' => '更新数据错误，原因可能为1：插入内容为空   2：字段名非法', 'mysql_delete_error' => 'DELETE删除语句必须输入条件,如果删除数据有表的主键字段也可以做为条件使用，还不清楚就看一下HD手册吧', 'mysql_where_error' => '的参数没有设置，如果不清楚使用方式请查看HD手册学习', 'mysql_in_error' => '的参数不能为空，如果不清楚使用方式请查看HD手册学习', 'mysql_field_error' => '的参数不能为空，如果不清楚使用方式请查看HD手册学习', 'mysql_limit_error' => '的参数不能为空，如果不清楚使用方式请查看HD手册学习', 'mysql_order_error' => '的参数不能为空，如果不清楚使用方式请查看HD手册学习', 'mysql_group_error' => '的参数不能为空，如果不清楚使用方式请查看HD手册学习', 'mysqlidriver_connect_db' => '数据库连接出错了请检查配置文件中的参数', 'model__call_error' => '模型中不存在方法', 'model_update_error' => '悲剧了。。。执行INSERT()方法时，没有任何插入数据，可以将数据做为insert()参数传入，系统也可以自动从$_POST中提取，如果还不清楚请参考HD框架手册', 'model_insert_error' => '悲剧了。。。INSERT参数不能为空！', 'model_replace_error' => '悲剧了。。。INSERT参数不能为空！', 'model_validate_error' => '验证规则定义错误，是不是打错了，看后盾帮助手册学习一下吧', 'model_auto_error' => '自动完成参数设置错误', 'model_token_error' => '表单Token(令牌)错误', 'relationmodel_check_error0' => '关联模型定义错误，请查看后盾HD框架手册学习', 'relationmodel_check_error1' => '多表操作定义的表的模型属性type值没有定义，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_check_error2' => '多表操作定义的表的模型属性type值必须是HAS_ONE、HAS_MANY、BELONGS_TO、MANY_TO_MANY中的一个，不区分大小写，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_check_error3' => '使用多表操作MANY_TO_MANY的表没有定义relation_table属性即中间关联表，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_check_error4' => '使用多表操作MANY_TO_MANY的表没有定义relation_table_parent_key属性，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_check_error5' => '使用多表操作MANY_TO_MANY的表没有定义relation_table_foreign_key属性，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_get_parent_key' => '表的主键不存在，手动设置主表的主键或都指定模型的parent_key值试试，还不行就看手册学习一下吧，很简单的！', 'relationmodel_get_foreign_key1' => 'MANY_TO_MANY关联失败：2种解决方法，设置关联表的主键或都指定模型的foreign_key值', 'relationmodel_get_foreign_key2' => '定义关联模型必须指定foreign_key值，如果不清楚使用规范，请参数HD框架帮助手册', 'relationmodel_select' => '模型的parent_key属性定义错误,可能不存在此字段,或者主表结果集中不含parent_key字段', 'relationmodel_insert' => '悲剧了。。。执行INSERT()时没有任何插入数据，插入数据可以是$_POST也可以直接传入INSERT()方法中，HD框架手册能帮到你！', 'relationmodel_update' => '悲剧了。。。执行INSERT()时没有任何插入数据，插入数据可以是$_POST也可以直接传入INSERT()方法中，HD框架手册能帮到你！', 'viewmodel_get_join_args1' => '定义视图必须指定ON值，如果不清楚使用规范，请参数HD框架帮助手册', 'viewmodel_get_join_args2' => '视图模型定义type值定义错误，type必须为left, right, inner之一。可以不设置type值,不设置将使用inner，如果不清楚使用规范，请参数HD框架帮助手册', 'view_gettemplatefile_error2' => '模版文件扩展名不能为空，请修改配置项TPL_FIX', 'view_gettemplatefile_error3' => '模版文件不存在', 'hdbasetag__zoom' => 'zoom标签必须设置 big、small、data属性，检查一下看哪个没有设置', 'hdbasetag__upload' => '上传标签upload必须指定name属性，如果不清楚使用规范请查看后盾HD框架手册', 'hdbasetag__foreach1' => 'foreach 模板标签必须有from属性', 'hdbasetag__foreach2' => 'foreach 模板标签必须有value属性', 'hdbasetag__load' => 'load 模板标签必须有value属性', 'hdbasetag__if' => 'if 模板标签必须有value属性', 'hdbasetag__while' => 'while模板标签必须有value属性', 'hdbasetag__empty' => 'empty模板标签必须有value属性', 'hdbasetag__editor' => '必须设置编辑器的name属性,用于$_POST接收', '_tag_param_error_' => '标签参数错误', 'debug_show1' => '服务器信息', 'debug_show2' => '客户端代理', 'debug_show3' => 'PHP版本', 'debug_show4' => '主机名', 'debug_show5' => '请求方式', 'debug_show6' => '通信协议', 'debug_show7' => '当前脚本', 'debug_show8' => '会话ID', 'debug_show9' => '模板编译文件', 'debug_show14' => '脚本总执行时间', 'debug_show15' => '内存峰值', '_nohavedebugstart' => '没有设置调试开始点：', 'exceptionhd_getexception1' => '错误信息', 'exceptionhd_getexception2' => '文件', 'exceptionhd_getexception3' => '行号', 'exceptionhd_show' => '查看详细错误信息方法有两种： ① 查看网站日志文件  ② 开启调试模式', 'exceptionhd_error1' => '错误信息', 'exceptionhd_error2' => '文件', 'exceptionhd_error3' => '行号', 'exceptionhd_error4' => '错误信息', 'exceptionhd_error5' => '文件', 'exceptionhd_error6' => '行号', 'exceptionhd_notice' => 'NOTICE', 'application_apprun1' => '控制器', 'application_apprun2' => '中的方法', 'application_apprun3' => '不存在', 'application_apprun4' => '应用不存在', 'application_apprun_createapp' => '点击创建应用', 'cart_add_error' => '购物车ADD方法参数设置错误', 'cart_update_error' => '购物车update方法参数错误，缺少sid或num值', 'cart_del_error' => '购物车update方法参数错误，缺少sid值', 'html_create_error1' => '请指定生成文件名参数[html_file]，请参考后盾HD框架手册', 'html_create_error2' => '创建目录失败，请检查目录权限', 'page_nowpage' => '第', 'page_count1' => '共', 'page_count2' => '页', 'page_count3' => '条记录', 'page_show_case1' => '总计', 'rbac_rbac_user_login1' => '用户表设置错误，请在配置文件中添加用户表', 'rbac_rbac_user_login2' => '用户不存在', 'rbac_rbac_user_login3' => '密码输入错误', 'rbac_rbac_user_login4' => '不属于任何组，没有访问权限', 'upload_upload_error' => '图片上传目录创建失败或不可写', 'upload_save_error1' => '图片上传目录创建失败或不可写', 'upload_save_error2' => '移动临时文件失败', 'upload_format_error' => '没有任何文件上传', 'upload_checkfile_error1' => '文件类型不允许', 'upload_checkfile_error2' => '上传文件大于', 'upload_checkfile_error3' => '非法文件', 'upload_checkfile_image' => '上传内容不是一个合法图片', 'upload_error_error1' => '上传文件超过PHP.INI配置文件允许的大小', 'upload_error_error2' => '文件超过表单限制大小', 'upload_error_error3' => '文件只上有部分上传', 'upload_error_error4' => '没有上传文件', 'upload_error_error5' => '没有上传临时文件夹', 'upload_error_error6' => '写入临时文件夹出错', 'validate__maxlen1' => '表单', 'validate__maxlen2' => '的值，必须为数字', 'validate__maxlen3' => '验证规则的maxlen参数设置错误，必须为数字', 'validate__minlen1' => '表单', 'validate__minlen2' => '的值必须为数字', 'validate__minlen3' => '验证规则的maxlen参数设置错误，必须为数字', 'success_html_title' => '后盾网提示——操作成功', 'success_html_hd_error_html_h2' => '操作成功!', 'success_html_span1' => '秒钟后将进行', 'success_html_span2' => '跳转', 'success_html_span3' => '也可以', 'success_html_span4' => '返回首页', 'error_html_title' => '后盾网提示——操作失败', 'error_html_hd_error_html_h2' => '操作失败!', 'error_html_span1' => '秒钟后将进行', 'error_html_span2' => '跳转', 'error_html_span3' => '也可以', 'error_html_span4' => '返回首页', '__call_method_no_exists' => '方法不存在', ));alias_import(array ( 'ip' => '/var/www/meituan/hdphp/Extend/Org/Ip/Ip.class.php', 'mail' => '/var/www/meituan/hdphp/Extend/Org/Mail/Mail.class.php', 'ueditor_upload' => '/var/www/meituan/hdphp/Extend/Org/Editor/Ueditor/php/ueditor_upload.php', 'keditor_upload' => '/var/www/meituan/hdphp/Extend/Org/Editor/Keditor/php/upload_json.php', 'hd_uploadify' => '/var/www/meituan/hdphp/Extend/Org/Uploadify/hd_uploadify.php', 'hd_uploadify_del' => '/var/www/meituan/hdphp/Extend/Org/Uploadify/hd_uploadify.php', 'editorcatcherurl' => '/var/www/meituan/hdphp/Extend/Org/Editor/Ueditor/php/ueditorCatcherUrl.php', ));HDPHP::init();define("CLEAR_TPL_COMPILE_FILE",strstr(__HOST__,$_SERVER["SERVER_NAME"])==false);App::run();?>